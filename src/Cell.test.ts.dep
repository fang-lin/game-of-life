import {Cell, Position} from './Cell';
import {objectify} from './utils';

describe('Cell', () => {
    let cell: Cell;
    beforeEach(() => {
        cell = new Cell([2, 1]);
    });

    test('this cell should have correct x and y', () => {
        expect(cell[0]).toBe(2);
        expect(cell[1]).toBe(1);
    });

    test('the equals function should return true with [2, 1]', () => {
        expect(cell.equals([2, 1])).toBe(true);
    });

    test('the equals function should return false with [2, 2]', () => {
        expect(cell.equals([2, 2])).toBe(false);
    });

    test('neighborsLength should be 0', () => {
        expect(cell.neighborsLength).toBe(0);
    });

    test('the neighbors should be empty', () => {
        expect(cell.neighbors).toEqual(Cell.EmptyNeighbors());
    });

    describe('if add a neighbor on the top left', () => {
        let addedIndex: Position | null;
        beforeEach(() => {
            addedIndex = cell.addNeighbor(new Cell([1, 0]));
        });

        test('addNeighbor should return correct index', () => {
            expect(addedIndex).toBe(Position.TopLeft);
        });

        test('neighborsLength should be 1', () => {
            expect(cell.neighborsLength).toBe(1);
        });

        test('the added neighbor should exist with index 0', () => {
            expect(cell.neighbors[Position.TopLeft]?.toTuple()).toEqual([1, 0]);
        });

        test('the added neighbor should have this cell as neighbor with correct index', () => {
            expect(cell.neighbors[Position.TopLeft]?.neighbors[Position.BottomRight]?.toTuple()).toEqual([2, 1]);
        });

        // describe('then remove the added neighbor', () => {
        //     let removedIndex: Position | null;
        //     beforeEach(() => {
        //         removedIndex = cell.removeNeighbor(cell.neighbors[Position.TopLeft]);
        //     });
        //
        //     test('removeNeighbor should return correct index', () => {
        //         expect(removedIndex).toBe(Position.TopLeft);
        //     });
        //
        //     test('neighborsLength should be 0', function () {
        //         expect(cell.neighborsLength).toBe(0);
        //     });
        //
        //     test('the neighbors should be empty', function () {
        //         expect(cell.neighbors).toEqual(Cell.EmptyNeighbors());
        //     });
        // });
    });

    describe('if add 2 neighbors on the top left and top', () => {
        let firstAddedIndex: Position | null, secondAddedIndex: Position | null;
        beforeEach(() => {
            const a = new Cell([1, 0]);
            const b = new Cell([2, 0]);
            firstAddedIndex = cell.addNeighbor(a);
            secondAddedIndex = cell.addNeighbor(b);
            a.addNeighbor(b);
        });

        test('addNeighbor should return correct index', () => {
            expect(firstAddedIndex).toBe(Position.TopLeft);
            expect(secondAddedIndex).toBe(Position.Left);
        });

        test('neighborsLength should be 2', () => {
            expect(cell.neighborsLength).toBe(2);
        });

        test('the added neighbor should exist with index 3', () => {
            expect(objectify(cell.neighbors[Position.Left])).toEqual([2, 0]);
        });

        test('the first added cell should be the neighbor of the second added cell', () => {
            expect(objectify(cell.neighbors[Position.Left]?.neighbors[Position.Top])).toEqual([1, 0]);
        });

        test('the second added cell should be the neighbor of the first added cell', () => {
            expect(objectify(cell.neighbors[Position.TopLeft]?.neighbors[Position.Bottom])).toEqual([2, 0]);
        });

        // describe('then remove the first added neighbor', () => {
        //     let removedIndex: Position | null;
        //     beforeEach(() => {
        //         removedIndex = cell.removeNeighbor(cell.neighbors[0]);
        //     });
        //
        //     test('removeNeighbor should return correct index', () => {
        //         expect(removedIndex).toBe(Position.TopLeft);
        //     });
        //
        //     test('neighborsLength should be 1', () => {
        //         expect(cell.neighborsLength).toBe(1);
        //     });
        //
        //     test('the neighbors should be the second added', () => {
        //         expect(objectify(cell.neighbors[Position.Left])).toEqual([2, 0])
        //     });
        //
        //     test('the neighborsLength of the second added neighbor should be 1', () => {
        //         expect(cell.neighbors[Position.Left]?.neighborsLength).toBe(1);
        //     });
        //
        //     test('the second added neighbor should only have one neighbor which is this cell', () => {
        //         expect(objectify(cell.neighbors[Position.Left]?.neighbors[5])).toEqual([2, 1]);
        //     });
        // });

    });

    describe('if add all neighbors', () => {
        beforeEach(() => {
            cell.addNeighbor(new Cell([1, 0]));
            cell.addNeighbor(new Cell([1, 1]));
            cell.addNeighbor(new Cell([1, 2]));
            cell.addNeighbor(new Cell([2, 0]));
            cell.addNeighbor(new Cell([2, 2]));
            cell.addNeighbor(new Cell([3, 0]));
            cell.addNeighbor(new Cell([3, 1]));
            cell.addNeighbor(new Cell([3, 2]));
        });

        test('neighborsLength should be 8', () => {
            expect(cell.neighborsLength).toBe(8);
        });

        test('the added neighbors should exist with correct indexes', () => {
            expect(objectify(cell.neighbors)).toEqual({
                '0': [1, 0],
                '1': [1, 1],
                '2': [1, 2],
                '3': [2, 0],
                '5': [2, 2],
                '6': [3, 0],
                '7': [3, 1],
                '8': [3, 2]
            });
        });

        describe('then destroy the cell', () => {
            let others: Array<Cell | null>;
            beforeEach(() => {
                others = Object.values(cell.neighbors);
                cell.destructor();
            });

            test('the neighbors of the cell should be empty', () => {
                expect(cell.neighbors).toEqual(Cell.EmptyNeighbors());
            });

            test('All other cells should not treat this cell as neighbors', () => {
                expect(Object.values(others[0]!.neighbors)).not.toContain(cell);
                expect(Object.values(others[1]!.neighbors!)).not.toContain(cell);
                expect(Object.values(others[2]!.neighbors)).not.toContain(cell);
                expect(Object.values(others[3]!.neighbors)).not.toContain(cell);
                expect(Object.values(others[4]!.neighbors)).not.toContain(cell);
                expect(Object.values(others[5]!.neighbors)).not.toContain(cell);
                expect(Object.values(others[6]!.neighbors)).not.toContain(cell);
                expect(Object.values(others[7]!.neighbors)).not.toContain(cell);
            });

        });
    });

    describe('if add a cell which is not a neighbor', () => {
        let firstAddedIndex: Position | null, secondAddedIndex: Position | null, thirdAddedIndex: Position | null;
        beforeEach(() => {
            firstAddedIndex = cell.addNeighbor(new Cell([3, 3]));
            secondAddedIndex = cell.addNeighbor(new Cell([2, 3]));
            thirdAddedIndex = cell.addNeighbor(new Cell([2, -1]));
        });

        test('addNeighbor should return null', () => {
            expect(firstAddedIndex).toBe(null);
            expect(secondAddedIndex).toBe(null);
            expect(thirdAddedIndex).toBe(null);
        });

        test('neighborsLength should be 0', () => {
            expect(cell.neighborsLength).toBe(0);
        });

        test('the neighbors should be empty', () => {
            expect(cell.neighbors).toEqual(Cell.EmptyNeighbors());
        });
    });

    describe('if add a cell which equals this cell', () => {
        beforeEach(() => {
            cell.addNeighbor(new Cell([2, 1]));
        });

        test('neighborsLength should be 0', () => {
            expect(cell.neighborsLength).toBe(0);
        });

        test('the neighbors should be empty', () => {
            expect(cell.neighbors).toEqual(Cell.EmptyNeighbors());
        });
    });
});